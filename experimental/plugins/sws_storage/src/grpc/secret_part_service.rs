// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `secret_part_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct PutSecretPartRequest {
    // message fields
    pub walletId: ::std::string::String,
    pub sk2: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutSecretPartRequest {
    fn default() -> &'a PutSecretPartRequest {
        <PutSecretPartRequest as ::protobuf::Message>::default_instance()
    }
}

impl PutSecretPartRequest {
    pub fn new() -> PutSecretPartRequest {
        ::std::default::Default::default()
    }

    // string walletId = 1;


    pub fn get_walletId(&self) -> &str {
        &self.walletId
    }
    pub fn clear_walletId(&mut self) {
        self.walletId.clear();
    }

    // Param is passed by value, moved
    pub fn set_walletId(&mut self, v: ::std::string::String) {
        self.walletId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_walletId(&mut self) -> &mut ::std::string::String {
        &mut self.walletId
    }

    // Take field
    pub fn take_walletId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.walletId, ::std::string::String::new())
    }

    // bytes sk2 = 2;


    pub fn get_sk2(&self) -> &[u8] {
        &self.sk2
    }
    pub fn clear_sk2(&mut self) {
        self.sk2.clear();
    }

    // Param is passed by value, moved
    pub fn set_sk2(&mut self, v: ::std::vec::Vec<u8>) {
        self.sk2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sk2(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sk2
    }

    // Take field
    pub fn take_sk2(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sk2, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PutSecretPartRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.walletId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sk2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.walletId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.walletId);
        }
        if !self.sk2.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sk2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.walletId.is_empty() {
            os.write_string(1, &self.walletId)?;
        }
        if !self.sk2.is_empty() {
            os.write_bytes(2, &self.sk2)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutSecretPartRequest {
        PutSecretPartRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "walletId",
                    |m: &PutSecretPartRequest| { &m.walletId },
                    |m: &mut PutSecretPartRequest| { &mut m.walletId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sk2",
                    |m: &PutSecretPartRequest| { &m.sk2 },
                    |m: &mut PutSecretPartRequest| { &mut m.sk2 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutSecretPartRequest>(
                    "PutSecretPartRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutSecretPartRequest {
        static mut instance: ::protobuf::lazy::Lazy<PutSecretPartRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutSecretPartRequest,
        };
        unsafe {
            instance.get(PutSecretPartRequest::new)
        }
    }
}

impl ::protobuf::Clear for PutSecretPartRequest {
    fn clear(&mut self) {
        self.walletId.clear();
        self.sk2.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutSecretPartRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutSecretPartRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutSecretPartResponse {
    // message fields
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutSecretPartResponse {
    fn default() -> &'a PutSecretPartResponse {
        <PutSecretPartResponse as ::protobuf::Message>::default_instance()
    }
}

impl PutSecretPartResponse {
    pub fn new() -> PutSecretPartResponse {
        ::std::default::Default::default()
    }

    // string message = 1;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PutSecretPartResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutSecretPartResponse {
        PutSecretPartResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &PutSecretPartResponse| { &m.message },
                    |m: &mut PutSecretPartResponse| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutSecretPartResponse>(
                    "PutSecretPartResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutSecretPartResponse {
        static mut instance: ::protobuf::lazy::Lazy<PutSecretPartResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutSecretPartResponse,
        };
        unsafe {
            instance.get(PutSecretPartResponse::new)
        }
    }
}

impl ::protobuf::Clear for PutSecretPartResponse {
    fn clear(&mut self) {
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutSecretPartResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutSecretPartResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetWalletEncryptionRequest {
    // message fields
    pub walletId: ::std::string::String,
    pub isEncrypted: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetWalletEncryptionRequest {
    fn default() -> &'a SetWalletEncryptionRequest {
        <SetWalletEncryptionRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetWalletEncryptionRequest {
    pub fn new() -> SetWalletEncryptionRequest {
        ::std::default::Default::default()
    }

    // string walletId = 1;


    pub fn get_walletId(&self) -> &str {
        &self.walletId
    }
    pub fn clear_walletId(&mut self) {
        self.walletId.clear();
    }

    // Param is passed by value, moved
    pub fn set_walletId(&mut self, v: ::std::string::String) {
        self.walletId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_walletId(&mut self) -> &mut ::std::string::String {
        &mut self.walletId
    }

    // Take field
    pub fn take_walletId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.walletId, ::std::string::String::new())
    }

    // bool isEncrypted = 2;


    pub fn get_isEncrypted(&self) -> bool {
        self.isEncrypted
    }
    pub fn clear_isEncrypted(&mut self) {
        self.isEncrypted = false;
    }

    // Param is passed by value, moved
    pub fn set_isEncrypted(&mut self, v: bool) {
        self.isEncrypted = v;
    }
}

impl ::protobuf::Message for SetWalletEncryptionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.walletId)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isEncrypted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.walletId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.walletId);
        }
        if self.isEncrypted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.walletId.is_empty() {
            os.write_string(1, &self.walletId)?;
        }
        if self.isEncrypted != false {
            os.write_bool(2, self.isEncrypted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetWalletEncryptionRequest {
        SetWalletEncryptionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "walletId",
                    |m: &SetWalletEncryptionRequest| { &m.walletId },
                    |m: &mut SetWalletEncryptionRequest| { &mut m.walletId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isEncrypted",
                    |m: &SetWalletEncryptionRequest| { &m.isEncrypted },
                    |m: &mut SetWalletEncryptionRequest| { &mut m.isEncrypted },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetWalletEncryptionRequest>(
                    "SetWalletEncryptionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetWalletEncryptionRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetWalletEncryptionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetWalletEncryptionRequest,
        };
        unsafe {
            instance.get(SetWalletEncryptionRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetWalletEncryptionRequest {
    fn clear(&mut self) {
        self.walletId.clear();
        self.isEncrypted = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetWalletEncryptionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetWalletEncryptionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetWalletEncryptionResponse {
    // message fields
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetWalletEncryptionResponse {
    fn default() -> &'a SetWalletEncryptionResponse {
        <SetWalletEncryptionResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetWalletEncryptionResponse {
    pub fn new() -> SetWalletEncryptionResponse {
        ::std::default::Default::default()
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetWalletEncryptionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetWalletEncryptionResponse {
        SetWalletEncryptionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &SetWalletEncryptionResponse| { &m.message },
                    |m: &mut SetWalletEncryptionResponse| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetWalletEncryptionResponse>(
                    "SetWalletEncryptionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetWalletEncryptionResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetWalletEncryptionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetWalletEncryptionResponse,
        };
        unsafe {
            instance.get(SetWalletEncryptionResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetWalletEncryptionResponse {
    fn clear(&mut self) {
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetWalletEncryptionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetWalletEncryptionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IssueWalletKeysRequest {
    // message fields
    pub walletId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IssueWalletKeysRequest {
    fn default() -> &'a IssueWalletKeysRequest {
        <IssueWalletKeysRequest as ::protobuf::Message>::default_instance()
    }
}

impl IssueWalletKeysRequest {
    pub fn new() -> IssueWalletKeysRequest {
        ::std::default::Default::default()
    }

    // string walletId = 1;


    pub fn get_walletId(&self) -> &str {
        &self.walletId
    }
    pub fn clear_walletId(&mut self) {
        self.walletId.clear();
    }

    // Param is passed by value, moved
    pub fn set_walletId(&mut self, v: ::std::string::String) {
        self.walletId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_walletId(&mut self) -> &mut ::std::string::String {
        &mut self.walletId
    }

    // Take field
    pub fn take_walletId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.walletId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IssueWalletKeysRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.walletId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.walletId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.walletId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.walletId.is_empty() {
            os.write_string(1, &self.walletId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IssueWalletKeysRequest {
        IssueWalletKeysRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "walletId",
                    |m: &IssueWalletKeysRequest| { &m.walletId },
                    |m: &mut IssueWalletKeysRequest| { &mut m.walletId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IssueWalletKeysRequest>(
                    "IssueWalletKeysRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IssueWalletKeysRequest {
        static mut instance: ::protobuf::lazy::Lazy<IssueWalletKeysRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IssueWalletKeysRequest,
        };
        unsafe {
            instance.get(IssueWalletKeysRequest::new)
        }
    }
}

impl ::protobuf::Clear for IssueWalletKeysRequest {
    fn clear(&mut self) {
        self.walletId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IssueWalletKeysRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IssueWalletKeysRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IssueWalletKeysResponse {
    // message fields
    pub sk2: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IssueWalletKeysResponse {
    fn default() -> &'a IssueWalletKeysResponse {
        <IssueWalletKeysResponse as ::protobuf::Message>::default_instance()
    }
}

impl IssueWalletKeysResponse {
    pub fn new() -> IssueWalletKeysResponse {
        ::std::default::Default::default()
    }

    // bytes sk2 = 1;


    pub fn get_sk2(&self) -> &[u8] {
        &self.sk2
    }
    pub fn clear_sk2(&mut self) {
        self.sk2.clear();
    }

    // Param is passed by value, moved
    pub fn set_sk2(&mut self, v: ::std::vec::Vec<u8>) {
        self.sk2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sk2(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sk2
    }

    // Take field
    pub fn take_sk2(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sk2, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IssueWalletKeysResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sk2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sk2.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sk2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sk2.is_empty() {
            os.write_bytes(1, &self.sk2)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IssueWalletKeysResponse {
        IssueWalletKeysResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sk2",
                    |m: &IssueWalletKeysResponse| { &m.sk2 },
                    |m: &mut IssueWalletKeysResponse| { &mut m.sk2 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IssueWalletKeysResponse>(
                    "IssueWalletKeysResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IssueWalletKeysResponse {
        static mut instance: ::protobuf::lazy::Lazy<IssueWalletKeysResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IssueWalletKeysResponse,
        };
        unsafe {
            instance.get(IssueWalletKeysResponse::new)
        }
    }
}

impl ::protobuf::Clear for IssueWalletKeysResponse {
    fn clear(&mut self) {
        self.sk2.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IssueWalletKeysResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IssueWalletKeysResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReissueSecretPartsRequest {
    // message fields
    pub walletId: ::std::string::String,
    pub privateKey: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReissueSecretPartsRequest {
    fn default() -> &'a ReissueSecretPartsRequest {
        <ReissueSecretPartsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReissueSecretPartsRequest {
    pub fn new() -> ReissueSecretPartsRequest {
        ::std::default::Default::default()
    }

    // string walletId = 1;


    pub fn get_walletId(&self) -> &str {
        &self.walletId
    }
    pub fn clear_walletId(&mut self) {
        self.walletId.clear();
    }

    // Param is passed by value, moved
    pub fn set_walletId(&mut self, v: ::std::string::String) {
        self.walletId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_walletId(&mut self) -> &mut ::std::string::String {
        &mut self.walletId
    }

    // Take field
    pub fn take_walletId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.walletId, ::std::string::String::new())
    }

    // bytes privateKey = 2;


    pub fn get_privateKey(&self) -> &[u8] {
        &self.privateKey
    }
    pub fn clear_privateKey(&mut self) {
        self.privateKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_privateKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.privateKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_privateKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.privateKey
    }

    // Take field
    pub fn take_privateKey(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.privateKey, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReissueSecretPartsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.walletId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.privateKey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.walletId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.walletId);
        }
        if !self.privateKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.privateKey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.walletId.is_empty() {
            os.write_string(1, &self.walletId)?;
        }
        if !self.privateKey.is_empty() {
            os.write_bytes(2, &self.privateKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReissueSecretPartsRequest {
        ReissueSecretPartsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "walletId",
                    |m: &ReissueSecretPartsRequest| { &m.walletId },
                    |m: &mut ReissueSecretPartsRequest| { &mut m.walletId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "privateKey",
                    |m: &ReissueSecretPartsRequest| { &m.privateKey },
                    |m: &mut ReissueSecretPartsRequest| { &mut m.privateKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReissueSecretPartsRequest>(
                    "ReissueSecretPartsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReissueSecretPartsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReissueSecretPartsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReissueSecretPartsRequest,
        };
        unsafe {
            instance.get(ReissueSecretPartsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReissueSecretPartsRequest {
    fn clear(&mut self) {
        self.walletId.clear();
        self.privateKey.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReissueSecretPartsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReissueSecretPartsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReissueSecretPartsResponse {
    // message fields
    pub sk2: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReissueSecretPartsResponse {
    fn default() -> &'a ReissueSecretPartsResponse {
        <ReissueSecretPartsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReissueSecretPartsResponse {
    pub fn new() -> ReissueSecretPartsResponse {
        ::std::default::Default::default()
    }

    // bytes sk2 = 1;


    pub fn get_sk2(&self) -> &[u8] {
        &self.sk2
    }
    pub fn clear_sk2(&mut self) {
        self.sk2.clear();
    }

    // Param is passed by value, moved
    pub fn set_sk2(&mut self, v: ::std::vec::Vec<u8>) {
        self.sk2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sk2(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sk2
    }

    // Take field
    pub fn take_sk2(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sk2, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReissueSecretPartsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sk2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sk2.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sk2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sk2.is_empty() {
            os.write_bytes(1, &self.sk2)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReissueSecretPartsResponse {
        ReissueSecretPartsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sk2",
                    |m: &ReissueSecretPartsResponse| { &m.sk2 },
                    |m: &mut ReissueSecretPartsResponse| { &mut m.sk2 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReissueSecretPartsResponse>(
                    "ReissueSecretPartsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReissueSecretPartsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReissueSecretPartsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReissueSecretPartsResponse,
        };
        unsafe {
            instance.get(ReissueSecretPartsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReissueSecretPartsResponse {
    fn clear(&mut self) {
        self.sk2.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReissueSecretPartsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReissueSecretPartsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateWalletRecoveryKeysRequest {
    // message fields
    pub walletId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateWalletRecoveryKeysRequest {
    fn default() -> &'a CreateWalletRecoveryKeysRequest {
        <CreateWalletRecoveryKeysRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateWalletRecoveryKeysRequest {
    pub fn new() -> CreateWalletRecoveryKeysRequest {
        ::std::default::Default::default()
    }

    // string walletId = 1;


    pub fn get_walletId(&self) -> &str {
        &self.walletId
    }
    pub fn clear_walletId(&mut self) {
        self.walletId.clear();
    }

    // Param is passed by value, moved
    pub fn set_walletId(&mut self, v: ::std::string::String) {
        self.walletId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_walletId(&mut self) -> &mut ::std::string::String {
        &mut self.walletId
    }

    // Take field
    pub fn take_walletId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.walletId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateWalletRecoveryKeysRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.walletId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.walletId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.walletId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.walletId.is_empty() {
            os.write_string(1, &self.walletId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateWalletRecoveryKeysRequest {
        CreateWalletRecoveryKeysRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "walletId",
                    |m: &CreateWalletRecoveryKeysRequest| { &m.walletId },
                    |m: &mut CreateWalletRecoveryKeysRequest| { &mut m.walletId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateWalletRecoveryKeysRequest>(
                    "CreateWalletRecoveryKeysRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateWalletRecoveryKeysRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateWalletRecoveryKeysRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateWalletRecoveryKeysRequest,
        };
        unsafe {
            instance.get(CreateWalletRecoveryKeysRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateWalletRecoveryKeysRequest {
    fn clear(&mut self) {
        self.walletId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateWalletRecoveryKeysRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateWalletRecoveryKeysRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateWalletRecoveryKeysResponse {
    // message fields
    pub privateKey: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateWalletRecoveryKeysResponse {
    fn default() -> &'a CreateWalletRecoveryKeysResponse {
        <CreateWalletRecoveryKeysResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateWalletRecoveryKeysResponse {
    pub fn new() -> CreateWalletRecoveryKeysResponse {
        ::std::default::Default::default()
    }

    // bytes privateKey = 1;


    pub fn get_privateKey(&self) -> &[u8] {
        &self.privateKey
    }
    pub fn clear_privateKey(&mut self) {
        self.privateKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_privateKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.privateKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_privateKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.privateKey
    }

    // Take field
    pub fn take_privateKey(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.privateKey, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateWalletRecoveryKeysResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.privateKey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.privateKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.privateKey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.privateKey.is_empty() {
            os.write_bytes(1, &self.privateKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateWalletRecoveryKeysResponse {
        CreateWalletRecoveryKeysResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "privateKey",
                    |m: &CreateWalletRecoveryKeysResponse| { &m.privateKey },
                    |m: &mut CreateWalletRecoveryKeysResponse| { &mut m.privateKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateWalletRecoveryKeysResponse>(
                    "CreateWalletRecoveryKeysResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateWalletRecoveryKeysResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateWalletRecoveryKeysResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateWalletRecoveryKeysResponse,
        };
        unsafe {
            instance.get(CreateWalletRecoveryKeysResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateWalletRecoveryKeysResponse {
    fn clear(&mut self) {
        self.privateKey.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateWalletRecoveryKeysResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateWalletRecoveryKeysResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19secret_part_service.proto\x12\nrouteguide\"D\n\x14PutSecretPartReq\
    uest\x12\x1a\n\x08walletId\x18\x01\x20\x01(\tR\x08walletId\x12\x10\n\x03\
    sk2\x18\x02\x20\x01(\x0cR\x03sk2\"1\n\x15PutSecretPartResponse\x12\x18\n\
    \x07message\x18\x01\x20\x01(\tR\x07message\"Z\n\x1aSetWalletEncryptionRe\
    quest\x12\x1a\n\x08walletId\x18\x01\x20\x01(\tR\x08walletId\x12\x20\n\
    \x0bisEncrypted\x18\x02\x20\x01(\x08R\x0bisEncrypted\"7\n\x1bSetWalletEn\
    cryptionResponse\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"4\
    \n\x16IssueWalletKeysRequest\x12\x1a\n\x08walletId\x18\x01\x20\x01(\tR\
    \x08walletId\"+\n\x17IssueWalletKeysResponse\x12\x10\n\x03sk2\x18\x01\
    \x20\x01(\x0cR\x03sk2\"W\n\x19ReissueSecretPartsRequest\x12\x1a\n\x08wal\
    letId\x18\x01\x20\x01(\tR\x08walletId\x12\x1e\n\nprivateKey\x18\x02\x20\
    \x01(\x0cR\nprivateKey\".\n\x1aReissueSecretPartsResponse\x12\x10\n\x03s\
    k2\x18\x01\x20\x01(\x0cR\x03sk2\"=\n\x1fCreateWalletRecoveryKeysRequest\
    \x12\x1a\n\x08walletId\x18\x01\x20\x01(\tR\x08walletId\"B\n\x20CreateWal\
    letRecoveryKeysResponse\x12\x1e\n\nprivateKey\x18\x01\x20\x01(\x0cR\npri\
    vateKey2\x8c\x04\n\nSecretPart\x12V\n\rPutSecretPart\x12\x20.routeguide.\
    PutSecretPartRequest\x1a!.routeguide.PutSecretPartResponse\"\0\x12h\n\
    \x13SetWalletEncryption\x12&.routeguide.SetWalletEncryptionRequest\x1a'.\
    routeguide.SetWalletEncryptionResponse\"\0\x12\\\n\x0fIssueWalletKeys\
    \x12\".routeguide.IssueWalletKeysRequest\x1a#.routeguide.IssueWalletKeys\
    Response\"\0\x12e\n\x12ReissueSecretParts\x12%.routeguide.ReissueSecretP\
    artsRequest\x1a&.routeguide.ReissueSecretPartsResponse\"\0\x12w\n\x18Cre\
    ateWalletRecoveryKeys\x12+.routeguide.CreateWalletRecoveryKeysRequest\
    \x1a,.routeguide.CreateWalletRecoveryKeysResponse\"\0BF\n$com.tbcasoft.c\
    cis.securewallet.protoB\x16SecretPartServiceProtoP\x01\xa2\x02\x03SWSJ\
    \x93\x0f\n\x06\x12\x04\x0e\0H\x01\n\xc4\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb9\x04\n\x20TBCASOFT,\x20INC.\x20PROPRIETARY\x20AND\x20CONFIDENTIAL\
    \x20INFORMATION\n\n\x20Copyright\x20(C)\x20TBCASOFT,\x20INC.\x20-\x20All\
    \x20Rights\x20Reserved.\n\n\x20NOTICE:\x20All\x20information\x20containe\
    d\x20herein\x20is,\x20and\x20remains\x20the\x20property\x20of\n\x20TBCAS\
    OFT,\x20INC.\x20The\x20intellectual\x20and\x20technical\x20concepts/expr\
    essions\x20contained\n\x20herein\x20are\x20proprietary\x20to\x20TBCASOFT\
    ,\x20INC.\x20and\x20may\x20be\x20covered\x20by\x20U.S.\x20and\n\x20Forei\
    gn\x20Patents,\x20and\x20are\x20protected\x20by\x20trade\x20secret\x20an\
    d/or\x20copyright\x20law.\n\x20Dissemination\x20of\x20this\x20informatio\
    n\x20or\x20reproduction\x20of\x20this\x20material\x20is\n\x20strictly\
    \x20forbidden\x20unless\x20prior\x20written\x20permission\x20is\x20obtai\
    ned\x20from\n\x20TBCASOFT,\x20INC.\n\n\n\x08\n\x01\x08\x12\x03\x10\0\"\n\
    \t\n\x02\x08\n\x12\x03\x10\0\"\n\x08\n\x01\x08\x12\x03\x11\0=\n\t\n\x02\
    \x08\x01\x12\x03\x11\0=\n\x08\n\x01\x08\x12\x03\x12\07\n\t\n\x02\x08\x08\
    \x12\x03\x12\07\n\x08\n\x01\x08\x12\x03\x13\0!\n\t\n\x02\x08$\x12\x03\
    \x13\0!\n\x08\n\x01\x02\x12\x03\x15\0\x13\n\n\n\x02\x06\0\x12\x04\x17\0\
    \x1d\x01\n\n\n\x03\x06\0\x01\x12\x03\x17\x08\x12\n\x0b\n\x04\x06\0\x02\0\
    \x12\x03\x18\x04O\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x18\x08\x15\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x18\x17+\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x186K\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x19\x04a\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x19\x08\x1b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x19\x1d7\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x19B]\n\x0b\n\x04\x06\0\
    \x02\x02\x12\x03\x1a\x04U\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1a\x08\
    \x17\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1a\x19/\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03\x1a:Q\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x1b\x04^\n\
    \x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x1b\x08\x1a\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03\x1b\x1c5\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x1b@Z\n\
    \x0b\n\x04\x06\0\x02\x04\x12\x03\x1c\x04p\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03\x1c\x08\x20\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x1c\"A\n\x0c\
    \n\x05\x06\0\x02\x04\x03\x12\x03\x1cLl\n\n\n\x02\x04\0\x12\x04\x1f\0\"\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x1c\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x20\x04\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x20\x04\n\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x20\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x20\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03!\x04\x12\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03!\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03!\
    \n\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03!\x10\x11\n\n\n\x02\x04\x01\
    \x12\x04$\0&\x01\n\n\n\x03\x04\x01\x01\x12\x03$\x08\x1d\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03%\x04\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03%\x04\n\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03%\x0b\x12\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03%\x15\x16\n\n\n\x02\x04\x02\x12\x04(\0+\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03(\x08\"\n\x0b\n\x04\x04\x02\x02\0\x12\x03)\x04\x18\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03)\x0b\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03)\x16\x17\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03*\x04\x19\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03*\x04\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03*\t\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03*\x17\x18\n\n\n\x02\x04\x03\x12\x04-\0/\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03-\x08#\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03.\x04\x17\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03.\x04\n\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03.\x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03.\x15\x16\n\n\n\x02\x04\x04\x12\x041\03\x01\n\n\n\x03\x04\x04\x01\
    \x12\x031\x08\x1e\n\x0b\n\x04\x04\x04\x02\0\x12\x032\x04\x18\n\x0c\n\x05\
    \x04\x04\x02\0\x05\x12\x032\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x032\
    \x0b\x13\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x032\x16\x17\n\n\n\x02\x04\
    \x05\x12\x045\07\x01\n\n\n\x03\x04\x05\x01\x12\x035\x08\x1f\n\x0b\n\x04\
    \x04\x05\x02\0\x12\x036\x04\x12\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x036\
    \x04\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x036\n\r\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x036\x10\x11\n\n\n\x02\x04\x06\x12\x049\0<\x01\n\n\n\x03\
    \x04\x06\x01\x12\x039\x08!\n\x0b\n\x04\x04\x06\x02\0\x12\x03:\x04\x18\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03:\x0b\x13\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03:\x16\x17\n\
    \x0b\n\x04\x04\x06\x02\x01\x12\x03;\x04\x19\n\x0c\n\x05\x04\x06\x02\x01\
    \x05\x12\x03;\x04\t\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03;\n\x14\n\x0c\
    \n\x05\x04\x06\x02\x01\x03\x12\x03;\x17\x18\n\n\n\x02\x04\x07\x12\x04>\0\
    @\x01\n\n\n\x03\x04\x07\x01\x12\x03>\x08\"\n\x0b\n\x04\x04\x07\x02\0\x12\
    \x03?\x04\x12\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03?\x04\t\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03?\n\r\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03?\
    \x10\x11\n\n\n\x02\x04\x08\x12\x04B\0D\x01\n\n\n\x03\x04\x08\x01\x12\x03\
    B\x08'\n\x0b\n\x04\x04\x08\x02\0\x12\x03C\x04\x18\n\x0c\n\x05\x04\x08\
    \x02\0\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03C\x0b\x13\
    \n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03C\x16\x17\n\n\n\x02\x04\t\x12\x04F\
    \0H\x01\n\n\n\x03\x04\t\x01\x12\x03F\x08(\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03G\x04\x19\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03G\x04\t\n\x0c\n\x05\x04\
    \t\x02\0\x01\x12\x03G\n\x14\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03G\x17\x18\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
